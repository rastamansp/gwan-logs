services:
  # Elasticsearch - Armazenamento de logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    container_name: gwan-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms256m -Xmx512m"
      - ingest.geoip.downloader.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 2
      start_period: 900s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elasticsearch.rule=Host(`${ELASTICSEARCH_DOMAIN}`)"
      - "traefik.http.routers.elasticsearch.entrypoints=web"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"

  # Logstash - Processamento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.1
    container_name: gwan-logstash
    environment:
      - ELASTICSEARCH_HOSTS=${LOGSTASH_ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_USERNAME=${LOGSTASH_ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${LOGSTASH_ELASTICSEARCH_PASSWORD}
      - LS_JAVA_OPTS=-Xms256m -Xmx512m
    volumes:
      - ls_data:/usr/share/logstash/data
      - ./configs/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./configs/logstash/pipelines:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 600s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logstash.rule=Host(`${LOGSTASH_DOMAIN}`)"
      - "traefik.http.routers.logstash.entrypoints=web"
      - "traefik.http.services.logstash.loadbalancer.server.port=9600"

  # Kibana - Interface de visualização
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.1
    container_name: gwan-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SSL_VERIFY=false
      - SERVER_NAME=gwan-kibana
      - SERVER_HOST=0.0.0.0
    volumes:
      - kb_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 1200s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_DOMAIN}`)"
      - "traefik.http.routers.kibana.entrypoints=web"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

# OpenTelemetry Collector - Coleta de telemetria
  otel-collector:
    image: otel/opentelemetry-collector:0.96.0
    container_name: gwan-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./configs/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus metrics (legacy)
    networks:
      - gwan
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.otel-collector.rule=Host(`${OTEL_COLLECTOR_DOMAIN}`)"
      - "traefik.http.routers.otel-collector.entrypoints=web"
      - "traefik.http.services.otel-collector.loadbalancer.server.port=8888"

# Jaeger - Visualização de traces
  jaeger:
    image: jaegertracing/all-in-one:1.55.0
    container_name: gwan-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_ENDPOINT=0.0.0.0:4317
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
      - "6831:6831/udp"  # UDP collector
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`${JAEGER_DOMAIN}`)"
      - "traefik.http.routers.jaeger.entrypoints=web"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

# Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: gwan-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

# Alertmanager - Gerenciamento de alertas
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: gwan-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager_data:/alertmanager
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`${ALERTMANAGER_DOMAIN}`)"
      - "traefik.http.routers.alertmanager.entrypoints=web"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

volumes:
  es_data:
  kb_data:
  ls_data:
  prometheus_data:
  alertmanager_data:

networks:
  gwan:
    external: true
