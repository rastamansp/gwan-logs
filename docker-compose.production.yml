services:
  # Elasticsearch - Armazenamento de logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    container_name: gwan-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-GwanLogs2024!}
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
      - ingest.geoip.downloader.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 2
      start_period: 900s
    # Configurações de recursos para produção
    # Limite de memória: 3GB
    # Reserva de memória: 1GB

  # Logstash - Processamento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.1
    container_name: gwan-logstash
    environment:
      - ELASTICSEARCH_HOSTS=${LOGSTASH_ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
      - ELASTICSEARCH_USERNAME=${LOGSTASH_ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${LOGSTASH_ELASTICSEARCH_PASSWORD:-GwanLogs2024!}
      - LS_JAVA_OPTS=-Xms512m -Xmx1g
    volumes:
      - ls_data:/usr/share/logstash/data
    ports:
      - "5044:5044"   # Beats input - Para aplicações
      - "5000:5000"   # TCP input - Para aplicações
      - "5001:5001"   # UDP input - Para aplicações
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 600s
    # Configurações de recursos para produção
    # Limite de memória: 1.5GB
    # Reserva de memória: 512MB

  # Kibana - Interface de visualização
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.1
    container_name: gwan-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SSL_VERIFY=false
      - SERVER_NAME=gwan-kibana
      - SERVER_HOST=0.0.0.0
    volumes:
      - kb_data:/usr/share/kibana/data
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 1200s
    ports:
      - "5602:5601"   # Interface Kibana (5601 interno)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gwan"
      - "traefik.http.routers.kibana.rule=Host(`kibana.gwan.com.br`)"
      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.routers.kibana.tls.certresolver=letsencrypt"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    # Configurações de recursos para produção
    # Limite de memória: 1GB
    # Reserva de memória: 512MB

  # Inicializador de configuração do OTEL Collector
  otel-config-init:
    image: alpine:latest
    container_name: gwan-otel-config-init
    command: |
      sh -c "
        cat > /config/otel-collector-config.yaml << 'EOF'
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

        prometheus:
          config:
            scrape_configs:
              - job_name: 'otel-collector'
                scrape_interval: 10s
                static_configs:
                  - targets: ['localhost:8888']

      processors:
        batch:
          timeout: 1s
          send_batch_size: 1024

        memory_limiter:
          limit_mib: 256
          spike_limit_mib: 128
          check_interval: 1s

      exporters:
        debug:
          verbosity: detailed

        jaeger:
          endpoint: jaeger:14250
          tls:
            insecure: true

        prometheus:
          endpoint: '0.0.0.0:8889'

      service:
        pipelines:
          traces:
            receivers: [otlp]
            processors: [memory_limiter, batch]
            exporters: [debug, jaeger]

          metrics:
            receivers: [otlp, prometheus]
            processors: [memory_limiter, batch]
            exporters: [debug, prometheus]

          logs:
            receivers: [otlp]
            processors: [memory_limiter, batch]
            exporters: [debug]

        extensions: [health_check]
        telemetry:
          logs:
            level: info

      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      EOF
        echo 'Configuração criada com sucesso!'
      "
    volumes:
      - otel_config_volume:/config
    networks:
      - gwan
    restart: "no"

  # OpenTelemetry Collector - Coleta de telemetria
  otel-collector:
    image: otel/opentelemetry-collector:0.88.0
    container_name: gwan-otel-collector
    command: ["--config=/etc/otel/otel-collector-config.yaml"]
    volumes:
      - otel_config_volume:/etc/otel:ro
    depends_on:
      - otel-config-init
      - elasticsearch
    ports:
      - "4317:4317"   # OTLP gRPC - Para aplicações
      - "4318:4318"   # OTLP HTTP - Para aplicações
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Jaeger - Visualização de traces
  jaeger:
    image: jaegertracing/all-in-one:1.55.0
    container_name: gwan-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - QUERY_BASE_PATH=/
      - SPAN_STORAGE_TYPE=memory
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    command: [
      "--collector.otlp.enabled=true",
      "--collector.otlp.grpc.host-port=0.0.0.0:4317",
      "--collector.otlp.http.host-port=0.0.0.0:4318",
      "--query.base-path=/",
      "--span-storage.type=memory"
    ]
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    ports:
      - "16687:16686"   # Interface Jaeger (16686 interno)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gwan"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.gwan.com.br`)"
      - "traefik.http.routers.jaeger.entrypoints=websecure"
      - "traefik.http.routers.jaeger.tls=true"
      - "traefik.http.routers.jaeger.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jaeger.service=jaeger"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
      - "traefik.http.services.jaeger.loadbalancer.server.scheme=http"
      - "traefik.http.middlewares.jaeger-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.jaeger.middlewares=jaeger-headers"
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: gwan-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "9091:9090"   # Interface Prometheus (9090 interno)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gwan"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.gwan.com.br`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Inicializador de configuração do Alertmanager
  alertmanager-config-init:
    image: alpine:latest
    container_name: gwan-alertmanager-config-init
    command: |
      sh -c "
        cat > /config/alertmanager.yml << 'EOF'
      global:
        resolve_timeout: 5m
        smtp_smarthost: 'localhost:587'
        smtp_from: 'alertmanager@gwan.com.br'
        smtp_auth_username: 'alertmanager@gwan.com.br'
        smtp_auth_password: 'password'

      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'web.hook'

      receivers:
        - name: 'web.hook'
          webhook_configs:
            - url: 'http://127.0.0.1:5001/'

      inhibit_rules:
        - source_match:
            severity: 'critical'
          target_match:
            severity: 'warning'
          equal: ['alertname', 'dev', 'instance']
      EOF
        echo 'Configuração do Alertmanager criada com sucesso!'
      "
    volumes:
      - alertmanager_config_volume:/config
    networks:
      - gwan
    restart: "no"

  # Alertmanager - Gerenciamento de alertas
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: gwan-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager_data:/alertmanager
      - alertmanager_config_volume:/etc/alertmanager:ro
    networks:
      - gwan
    depends_on:
      - alertmanager-config-init
    restart: unless-stopped
    ports:
      - "9094:9093"   # Interface Alertmanager (9093 interno)
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gwan"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.gwan.com.br`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls=true"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
    # Configurações de recursos para produção
    # Limite de memória: 256MB
    # Reserva de memória: 128MB

volumes:
  es_data:
    driver: local
  kb_data:
    driver: local
  ls_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  alertmanager_config_volume:
    driver: local
  otel_config_volume:
    driver: local

networks:
  gwan:
    external: true
