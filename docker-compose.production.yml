services:
  # Traefik - Reverse Proxy e Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: gwan-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.gwan.com.br`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"

  # Elasticsearch - Armazenamento de logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    container_name: gwan-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-GwanLogs2024!}
      - "ES_JAVA_OPTS=-Xms1g -Xmx2g"
      - ingest.geoip.downloader.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 2
      start_period: 900s
    # Configurações de recursos para produção
    # Limite de memória: 3GB
    # Reserva de memória: 1GB

  # Logstash - Processamento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.1
    container_name: gwan-logstash
    environment:
      - ELASTICSEARCH_HOSTS=${LOGSTASH_ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
      - ELASTICSEARCH_USERNAME=${LOGSTASH_ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${LOGSTASH_ELASTICSEARCH_PASSWORD:-GwanLogs2024!}
      - LS_JAVA_OPTS=-Xms512m -Xmx1g
    volumes:
      - ls_data:/usr/share/logstash/data
    ports:
      - "5044:5044"   # Beats input - Para aplicações
      - "5000:5000"   # TCP input - Para aplicações
      - "5001:5001"   # UDP input - Para aplicações
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 600s
    # Configurações de recursos para produção
    # Limite de memória: 1.5GB
    # Reserva de memória: 512MB

  # Kibana - Interface de visualização
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.1
    container_name: gwan-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SSL_VERIFY=false
      - SERVER_NAME=gwan-kibana
      - SERVER_HOST=0.0.0.0
    volumes:
      - kb_data:/usr/share/kibana/data
    networks:
      - gwan
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 300s
      timeout: 120s
      retries: 3
      start_period: 1200s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.gwan.com.br`)"
      - "traefik.http.routers.kibana.entrypoints=web"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    # Configurações de recursos para produção
    # Limite de memória: 1GB
    # Reserva de memória: 512MB

  # OpenTelemetry Collector - Coleta de telemetria
  otel-collector:
    image: otel/opentelemetry-collector:0.96.0
    container_name: gwan-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"   # OTLP gRPC - Para aplicações
      - "4318:4318"   # OTLP HTTP - Para aplicações
    networks:
      - gwan
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:13133/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Jaeger - Visualização de traces
  jaeger:
    image: jaegertracing/all-in-one:1.55.0
    container_name: gwan-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_ENDPOINT=otel-collector:4317
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:16686/ || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.gwan.com.br`)"
      - "traefik.http.routers.jaeger.entrypoints=web"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Prometheus - Coleta de métricas
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: gwan-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
    networks:
      - gwan
    depends_on:
      - otel-collector
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.gwan.com.br`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    # Configurações de recursos para produção
    # Limite de memória: 512MB
    # Reserva de memória: 256MB

  # Alertmanager - Gerenciamento de alertas
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: gwan-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager_data:/alertmanager
    networks:
      - gwan
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.gwan.com.br`)"
      - "traefik.http.routers.alertmanager.entrypoints=web"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
    # Configurações de recursos para produção
    # Limite de memória: 256MB
    # Reserva de memória: 128MB

volumes:
  es_data:
    driver: local
  kb_data:
    driver: local
  ls_data:
    driver: local
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  gwan:
    external: true
