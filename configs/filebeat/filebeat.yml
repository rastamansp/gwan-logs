# Configuração do Filebeat para Gwan Logs
filebeat.inputs:
- type: container
  paths:
    - '/var/lib/docker/containers/*/*.log'
  processors:
    - add_docker_metadata:
        host: "unix:///var/run/docker.sock"
    - decode_json_fields:
        fields: ["message"]
        target: "json"
        overwrite_keys: true
    - add_fields:
        fields:
          environment: "production"
          service: "gwan-logs"

# Processamento de logs
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~

# Filtros de log
  - drop_event:
      when:
        equals:
          container.labels.logging: "false"
  - drop_event:
      when:
        regexp:
          message: "^(health check|heartbeat|ping)$"

# Formatação de logs
  - script:
      lang: javascript
      source: >
        function process(event) {
          var message = event.Get("message");
          if (message && typeof message === "string") {
            // Formato de log estruturado
            var logData = {
              "@timestamp": event.Get("@timestamp"),
              "level": event.Get("log.level") || "info",
              "message": message,
              "service": event.Get("container.labels.com_docker_compose_service") || "unknown",
              "container": event.Get("container.name") || "unknown",
              "environment": event.Get("environment") || "production"
            };
            event.Put("log", logData);
          }
        }

# Output para Elasticsearch
output.elasticsearch:
  hosts: ["elasticsearch:9200"]
  username: "elastic"
  password: "${ELASTIC_PASSWORD}"
  index: "gwan-logs-%{+yyyy.MM.dd}"

# Configurações de logging
logging.level: info
logging.to_files: true
logging.files:
  path: /var/log/filebeat
  name: filebeat
  keepfiles: 7
  permissions: 0644
